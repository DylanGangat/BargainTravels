{"version":3,"sources":["scripts/script.js","scripts/shoppingCart.js"],"names":["navToggle","document","querySelector","overlay","nav","shoppingCart","JSON","parse","localStorage","getItem","shoppingCartTotalIcon","cartItems","cartTotal","cart","length","textContent","classList","remove","add","addEventListener","e","currentTarget","hasAttribute","toggle","target","emptyCartMessage","orderSummary","cardParent","subTotal","orderTotal","innerHTML","removeItem","quantityUpdated","parent","closest","id","parseInt","dataset","filteredCart","filter","item","updateCart","size","quantity","value","find","generateShoppingCart","forEach","templateCard","image","name","price","card","setItem","stringify","updatePrice","cartMessage","totalPrice","reduce","acc","loadShoppingCart"],"mappings":"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","file":"shoppingCart.407f7efd.js","sourceRoot":"..\\public","sourcesContent":["const navToggle = document.querySelector(\"[data-nav-toggle]\");\r\nconst overlay = document.querySelector(\"[data-overlay]\");\r\nconst nav = document.querySelector(\"[data-nav]\");\r\nconst shoppingCart = JSON.parse(localStorage.getItem(\"SHOPPING_CART\"));\r\nexport const shoppingCartTotalIcon = document.querySelector(\r\n  \"[data-shoppingcart-icon]\"\r\n);\r\nexport const cartItems = shoppingCartTotalIcon.querySelector(\r\n  \".shopping-cart-total\"\r\n);\r\n\r\n// Function for updating the items total thats above the shopping icon\r\nexport const cartTotal = cart => {\r\n  if (cart.length) {\r\n    cartItems.textContent = cart.length;\r\n    cartItems.classList.remove(\"visually-hidden\");\r\n  } else {\r\n    cartItems.classList.add(\"visually-hidden\");\r\n  }\r\n};\r\n\r\n// To hide items total when\r\nif (shoppingCart != null && shoppingCart.length !== 0) {\r\n  cartTotal(shoppingCart);\r\n} else {\r\n  cartItems.classList.add(\"visually-hidden\");\r\n}\r\n\r\nnavToggle.addEventListener(\"click\", e => {\r\n  if (!e.currentTarget.hasAttribute(\"data-nav-toggle\")) return;\r\n  nav.classList.toggle(\"visually-hidden\");\r\n  nav.classList.toggle(\"active\");\r\n  overlay.classList.toggle(\"visually-hidden\");\r\n  overlay.classList.toggle(\"active\");\r\n});\r\n\r\noverlay.addEventListener(\"click\", e => {\r\n  if (!e.target.hasAttribute(\"data-overlay\")) return;\r\n  nav.classList.add(\"visually-hidden\");\r\n  nav.classList.toggle(\"active\");\r\n  overlay.classList.add(\"visually-hidden\");\r\n  overlay.classList.remove(\"active\");\r\n});\r\n","import \"./script.js\";\r\nimport { shoppingCartTotalIcon, cartItems, cartTotal } from \"./script.js\";\r\n\r\nlet shoppingCart = [];\r\n\r\nconst emptyCartMessage = document.querySelector(\"[data-unsaved-message]\");\r\nconst orderSummary = document.querySelector(\"[data-order-summary]\");\r\nconst cardParent = document.querySelector(\"[data-shopping-cart]\");\r\nconst subTotal = document.querySelector(\"[data-order-subtotal]\");\r\nconst orderTotal = document.querySelector(\"[data-order-total]\");\r\ncardParent.innerHTML = \"\";\r\n\r\n// To watch for updates on cards in the shoppingCart\r\ncardParent.addEventListener(\"click\", e => {\r\n  // Remove a product item\r\n  removeItem(e);\r\n});\r\n\r\ncardParent.addEventListener('change', e =>  {\r\n  // Update total when changing quantity\r\n  quantityUpdated(e);\r\n})\r\n\r\n// For removing product item\r\nconst removeItem = e => {\r\n  if (e.target.hasAttribute(\"data-remove\")) {\r\n    const parent = e.target.closest(\".cart-item\");\r\n    // Had to convert id from string to number\r\n    const id = parseInt(parent.dataset.id);\r\n    const filteredCart = shoppingCart.filter(item => item.id !== id);\r\n    updateCart(filteredCart);\r\n  }\r\n};\r\n\r\n// For Update total when changing quantity\r\nconst quantityUpdated = e => {\r\n  if (e.target.hasAttribute(\"data-quantity\")) {\r\n    const parent = e.target.closest(\".cart-item\");\r\n    // Had to convert id from string to number\r\n    const id = parseInt(parent.dataset.id);\r\n    const size = parent.querySelector(\"[data-size]\").dataset.size;\r\n    const quantity = parseInt(e.target.value);\r\n    const findCartItem = shoppingCart.find(\r\n      item => item.id === id && item.size === size\r\n    );\r\n    findCartItem.quantity = quantity;\r\n    let quantityChanged = shoppingCart;\r\n    updateCart(quantityChanged);\r\n  }\r\n};\r\n\r\n// To put the information of the products into card items\r\nconst generateShoppingCart = cart => {\r\n  cardParent.innerHTML = \"\";\r\n  cart.forEach(templateCard);\r\n};\r\n\r\n// Template for the card item\r\nconst templateCard = item => {\r\n  const { image, name, price, quantity, size, id } = item;\r\n\r\n  const card = `\r\n        <div class=\"cart-item\" data-id=\"${id}\">\r\n            <div class=\"col-span-full xs:col-span-1\">\r\n                <img class=\"mockup\" src=\"${image}\" alt=\"A mockup of our ${name}\" loading=\"lazy\">\r\n            </div>\r\n            <div class=\"col-span-full xs:col-span-2 flex flex-col\">\r\n                <div>\r\n                <div class=\"flex items-center justify-between\">\r\n                    <h3 class=\"font-semibold text-lg md:text-2xl\">${name}</h3>\r\n                    <p class=\"size text-secondary-300 border-secondary\" data-size=\"${size}\">${size}</p>\r\n                </div>\r\n                <p class=\"text-secondary-400 text-lg md:text-2xl font-semibold mt-1 md:mt-2\" data-price=\"${price}\">R${price}</p>          \r\n                </div>\r\n                <div class=\"more-info\">\r\n                    <div class=\"flex gap-4 items-center\">\r\n                        <label for=\"number${id}\">Quantity:</label>\r\n                        <input type=\"number\" name=\"number\" id=\"number${id}\" min=\"1\" value=\"${quantity}\" required data-quantity>\r\n                    </div>\r\n                    <button data-remove>Remove</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            `;\r\n\r\n  cardParent.innerHTML += card;\r\n};\r\n\r\n// Update cart in loacal storage\r\nconst updateCart = filteredCart => {\r\n  // Sets the local storage with new filtered array\r\n  localStorage.setItem(\"SHOPPING_CART\", JSON.stringify(filteredCart));\r\n  // updates shoppingCart with filtered array\r\n  shoppingCart = JSON.parse(localStorage.getItem(\"SHOPPING_CART\"));\r\n  // Uses new array to form new template\r\n  generateShoppingCart(shoppingCart);\r\n  updatePrice(shoppingCart);\r\n  cartTotal(shoppingCart);\r\n\r\n  // Checks whether it should display or hide message due to the updated array\r\n  cartMessage(shoppingCart);\r\n};\r\n\r\n// Update the price of total\r\nconst updatePrice = shoppingCart => {\r\n  let totalPrice = shoppingCart.reduce((acc, item) => {\r\n    return acc + item.price * item.quantity;\r\n  }, 0);\r\n  subTotal.textContent = `R${totalPrice}`;\r\n  orderTotal.textContent = `R${totalPrice}`;\r\n};\r\n\r\n// If there are items in local storage then we can get the info and display it\r\nconst loadShoppingCart = () => {\r\n  if (localStorage.getItem(\"SHOPPING_CART\")) {\r\n    shoppingCart = JSON.parse(localStorage.getItem(\"SHOPPING_CART\"));\r\n    generateShoppingCart(shoppingCart);\r\n    updatePrice(shoppingCart);\r\n    cartTotal(shoppingCart);\r\n  }\r\n};\r\n\r\nloadShoppingCart();\r\n\r\n// To display empty message if user didnt add to cart anything\r\nconst cartMessage = shoppingCart => {\r\n  if (shoppingCart.length === 0) {\r\n    emptyCartMessage.classList.remove(\"hidden\");\r\n    orderSummary.classList.add(\"hidden\");\r\n  } else {\r\n    emptyCartMessage.classList.add(\"hidden\");\r\n    orderSummary.classList.remove(\"hidden\");\r\n  }\r\n};\r\n\r\ncartMessage(shoppingCart);\r\n"]}